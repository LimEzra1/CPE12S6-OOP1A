# -*- coding: utf-8 -*-
"""Jupyter_Notebook_OOP_Template_Hands-on Activity 1.1 Literals, Operators, and Variables.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1c7y2aATPTK7lSi58TZK7qaAB9PX6bH7b

```
# This is formatted as code
```

# SW#1 - Final

Group 3

Section: CPE12S6

Date performed: April 8, 2024

## Contents
 - [Procedures](#procedures)
 - [Supplementary Activity](#supplementary_activities)
 - [Conclusion](#conclusion)

## Instructions for Lab Activities
---
Document all procedures and supplementary tasks performed in the activity.

You may use these links for reference on markdown with Jupyter:

https://jupyter-notebook.readthedocs.io/en/stable/examples/Notebook/Notebook%20Basics.html

https://colab.research.google.com/notebooks/welcome.ipynb

https://colab.research.google.com/notebooks/markdown_guide.ipynb

Be creative in documenting how you did the procedures below using the markdown. Also provide your observations as often as necessary per step.

Place your code per **In [ ]** corresponding to the specified procedure. An example is given below

## <a id="procedures">Procedures</a>

### Assigning variables of different data types in Python

1\. Assign a variable ***value*** to be equal to 1 then display the value using print()
"""

value = 1
print(value)

"""2\. Second step. Note how the numberings are done."""

type(value)

"""### Observation:


It can be observed that the **print**(value) code displays the number assigned to the value variable.

## <a id="supplementary_activities">Supplementary Activity</a>

#1.
"""

base=float(input("Enter the base of the triangle"))
height=float(input("Enter the height of the triangle:"))
area=0.5 * base * height
print(f"The area of the triangle is {area}")

"""#2."""

def celsius_to_fahrenheit(celsius):
  fahrenheit=(celsius * 9/5)+32
  return fahrenheit

celsius_input=float(input("Enter the temperature in Celsius:"))
fahrenheit_output=celsius_to_fahrenheit(celsius_input)
print(f"{celsius_input}°C={fahrenheit_output}°F")

"""#3."""

def calculate_distance(x1, y1, x2, y2):
  distance = ((x2 - x1)**2 + (y2 - y1)**2)**0.5
  return distance
x1, y1 = 2, 2
x2, y2 = -3, 3
distance = calculate_distance(x1, y1, x2, y2)
print(f"The distance between the points is: {distance}")

"""#Questions:

1.
Give one major difference in syntax that Python has with other languages such as C?

---
One major difference in syntax that Python has compared to languages like C is that Python uses indentation to define code blocks, such as loops, conditions, and functions, while languages like C typically use curly braces {} or keywords like begin and end to denote code blocks.

2.
How does variable assignment differ in Python compared with other languages such as C?*italicized text*

---
In Python, variable assignment works slightly differently compared to languages like C. In Python, we don't need to explicitly declare the variable type before assigning a value to it. Python dynamically assigns the type of the variable based on the value assigned to it. This means we can assign different types of values to the same variable without any issues.

3.
Try assigning variable names that start with numbers, and special characters. Is the assigning of variables that start with numbers accepted by Python? For Special Characters? Is there an exception for variables special characters?

---
In Python, variable names cannot start with a number or special character. Variable names in Python must start with a letter (a-z, A-Z) or an underscore (_) followed by zero or more letters, digits, or underscores.

If you try to assign a variable name that starts with a number or a special character, Python will raise a SyntaxError.

Here are examples to show that variables starting with numbers and special characters are not accepted in Python:
"""

#Attempting to assign a variable starting with a number:
1variable = 10  # SyntaxError: invalid syntax

#Attempting to assign a variable starting with a special character:
@variable = 10  # SyntaxError: invalid syntax

"""In Python, the variable name must adhere to the rules specified above to be valid for assignment.

4.
Do the assignment operators (+, -, *, /, %, **) work for all data types? Why or Why not?

---
In Python, the assignment operators (+, -, *, /, %) work differently for different data types.



*   For numeric data types like integers and floating-point numbers, the assignment operators (+, -, *, /, %) work as expected for performing arithmetic operations.
*   For strings, the + operator works as a concatenation operator (joining two strings together), and the * operator works as a repetition operator (repeating a string a certain number of times).

*   For lists and other iterable data types, the + operator works as a concatenation operator, and the * operator works as a repetition operator.
*   Division (/) works differently for integers (result is a float) and floating-point numbers (result is a float).

The behavior of assignment operators in Python depends on the data types involved in the operation. Python is a dynamically typed language, which means the behavior of these operators can vary depending on the data types being used.

5.
How does the * operator differ from the ** operator?

---
The * operator is used for multiplication and repetition, while the ** operator is used for exponentiation and accepting keyword arguments in function definitions.

## <a id="conclusion">Conclusion</a>

With this lab activity we learned and able to optimized asign and math operators with the use of python programming.
"""